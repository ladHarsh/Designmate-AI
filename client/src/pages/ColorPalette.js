import React, { useState } from 'react';
import { colorAPI, apiUtils } from '../services/api';
import { motion } from 'framer-motion';
import { 
  SwatchIcon, 
  EyeDropperIcon, 
  HeartIcon,
  ShareIcon,
  ArrowDownTrayIcon,
  ArrowPathIcon,
  CheckIcon
} from '@heroicons/react/24/outline';

const ColorPalette = () => {
  const [formData, setFormData] = useState({
    keywords: '',
    industry: '',
    mood: '',
    colorCount: 5,
    baseColor: '#3B82F6'
  });

  const [isGenerating, setIsGenerating] = useState(false);
  const [generatedPalettes, setGeneratedPalettes] = useState([]);
  const [selectedPalette, setSelectedPalette] = useState(null);

  const moods = [
    'Professional', 'Creative', 'Calm', 'Energetic', 'Luxury',
    'Friendly', 'Modern', 'Vintage', 'Bold', 'Subtle'
  ];

  const industries = [
    'Technology', 'Healthcare', 'Finance', 'Education', 'Retail',
    'Entertainment', 'Travel', 'Food & Beverage', 'Fashion', 'Real Estate'
  ];

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setFormData(prev => ({
      ...prev,
      [name]: value
    }));
  };

  const generatePalette = async () => {
    setIsGenerating(true);
    try {
      const numColors = parseInt(formData.colorCount, 10) || 5;

      const baseLines = [
        `Generate a color palette with ${numColors} colors.`,
        `Keywords: ${formData.keywords || 'none'}.`,
        `Industry: ${formData.industry || 'general'}.`,
        `Mood: ${formData.mood || 'professional'}.`
      ];
      if (formData.baseColor) {
        baseLines.push(`Base color: ${formData.baseColor}.`);
      }
      baseLines.push('Return colors as an array of HEX values.');
      const prompt = baseLines.join('\n');

      const normalizeMood = (m) => {
        const map = {
          Calm: 'calm',
          Energetic: 'energetic',
          Professional: 'professional',
          Playful: 'playful',
          Elegant: 'elegant',
          Bold: 'bold',
          Minimal: 'minimal',
          Warm: 'warm',
          Cool: 'cool'
        };
        return map[m] || 'professional';
      };

      const normalizeIndustry = (i) => {
        const map = {
          Technology: 'technology',
          Healthcare: 'healthcare',
          Finance: 'finance',
          Education: 'education',
          Retail: 'retail',
          'Food & Beverage': 'food',
          Travel: 'travel',
          Fashion: 'fashion',
          Entertainment: 'entertainment',
          'Real Estate': 'other'
        };
        return map[i] || 'other';
      };

      const { data } = await colorAPI.generate({
        prompt,
        mood: normalizeMood(formData.mood),
        industry: normalizeIndustry(formData.industry),
        paletteType: 'custom'
      });

      const palette = data?.data?.colorPalette;

      const toHexArray = (colorsObj) => {
        if (!colorsObj || typeof colorsObj !== 'object') return [];
        const roles = ['primary', 'secondary', 'accent', 'background', 'text'];
        const list = [];
        roles.forEach((role) => {
          const hex = colorsObj[role]?.hex;
          if (hex) list.push(hex);
        });
        if (Array.isArray(colorsObj.neutral)) {
          colorsObj.neutral.forEach((c) => c?.hex && list.push(c.hex));
        }
        return list
          .filter(Boolean)
          .map((h) => (typeof h === 'string' ? h.toUpperCase() : h))
          .slice(0, numColors);
      };

      const hexArray = Array.isArray(palette?.colors)
        ? palette.colors
        : toHexArray(palette?.colors);

      const accessibilityLabel = (() => {
        const acc = palette?.accessibility || {};
        if (acc.wcagAAA) return 'AAA';
        if (acc.wcagAA) return 'AA';
        return 'A';
      })();

      const uiPalette = {
        id: palette?._id || Date.now(),
        name: palette?.name || 'AI Generated Palette',
        description: palette?.description || 'Auto-generated by AI based on your inputs',
        colors: hexArray,
        mood: formData.mood || 'Professional',
        accessibility: accessibilityLabel,
        tags: [formData.industry || 'General', formData.mood || 'Professional']
      };

      setGeneratedPalettes((prev) => [uiPalette, ...prev]);
    } catch (error) {
      const message = apiUtils.handleError(error);
      console.error('Error generating palette:', message);
      alert(message);
    } finally {
      setIsGenerating(false);
    }
  };

  const likePalette = (paletteId) => {
    setGeneratedPalettes(prev => 
      prev.map(palette => 
        palette.id === paletteId 
          ? { ...palette, liked: !palette.liked }
          : palette
      )
    );
  };

  const copyColor = (color) => {
    navigator.clipboard.writeText(color);
    // Show toast notification
  };

  const ColorSwatch = ({ color, name, onClick }) => (
    <motion.div
      whileHover={{ scale: 1.05 }}
      whileTap={{ scale: 0.95 }}
      className="relative group cursor-pointer"
      onClick={onClick}
    >
      <div 
        className="w-16 h-16 rounded-lg shadow-md border-2 border-white"
        style={{ backgroundColor: color }}
      />
      <div className="absolute inset-0 bg-black bg-opacity-0 group-hover:bg-opacity-20 rounded-lg transition-all duration-200 flex items-center justify-center">
        <CheckIcon className="h-6 w-6 text-white opacity-0 group-hover:opacity-100 transition-opacity duration-200" />
      </div>
      {name && (
        <p className="text-xs text-gray-600 mt-1 text-center">{name}</p>
      )}
    </motion.div>
  );

  return (
    <div className="min-h-screen bg-gradient-to-br from-purple-50 to-blue-50">
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Header */}
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          className="text-center mb-12"
        >
          <div className="flex items-center justify-center mb-4">
            <SwatchIcon className="h-8 w-8 text-purple-600 mr-3" />
            <h1 className="text-4xl font-bold text-gray-900">Color Palette Generator</h1>
          </div>
          <p className="text-xl text-gray-600 max-w-3xl mx-auto">
            Create stunning color palettes with AI assistance. Generate harmonious color schemes 
            that perfectly match your brand and design goals.
          </p>
        </motion.div>

        <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
          {/* Form Section */}
          <motion.div
            initial={{ opacity: 0, x: -20 }}
            animate={{ opacity: 1, x: 0 }}
            className="lg:col-span-1"
          >
            <div className="bg-white rounded-2xl shadow-xl p-6 sticky top-8">
              <h2 className="text-2xl font-bold text-gray-900 mb-6">Palette Settings</h2>
              
              <form className="space-y-6">
                {/* Keywords */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Keywords
                  </label>
                  <input
                    type="text"
                    name="keywords"
                    value={formData.keywords}
                    onChange={handleInputChange}
                    placeholder="e.g., ocean, sunset, forest, modern"
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  />
                </div>

                {/* Industry */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Industry
                  </label>
                  <select
                    name="industry"
                    value={formData.industry}
                    onChange={handleInputChange}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  >
                    <option value="">Select industry</option>
                    {industries.map(industry => (
                      <option key={industry} value={industry}>{industry}</option>
                    ))}
                  </select>
                </div>

                {/* Mood */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Mood
                  </label>
                  <select
                    name="mood"
                    value={formData.mood}
                    onChange={handleInputChange}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  >
                    <option value="">Select mood</option>
                    {moods.map(mood => (
                      <option key={mood} value={mood}>{mood}</option>
                    ))}
                  </select>
                </div>

                {/* Color Count */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Number of Colors
                  </label>
                  <select
                    name="colorCount"
                    value={formData.colorCount}
                    onChange={handleInputChange}
                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                  >
                    <option value={3}>3 Colors</option>
                    <option value={4}>4 Colors</option>
                    <option value={5}>5 Colors</option>
                    <option value={6}>6 Colors</option>
                    <option value={8}>8 Colors</option>
                  </select>
                </div>

                {/* Base Color */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Base Color (Optional)
                  </label>
                  <div className="flex items-center space-x-3">
                    <input
                      type="color"
                      name="baseColor"
                      value={formData.baseColor}
                      onChange={handleInputChange}
                      className="w-12 h-12 rounded-lg border-2 border-gray-300 cursor-pointer"
                    />
                    <input
                      type="text"
                      value={formData.baseColor}
                      readOnly
                      className="flex-1 px-3 py-2 border border-gray-300 rounded-lg bg-gray-50 text-sm font-mono"
                    />
                  </div>
                </div>

                {/* Generate Button */}
                <button
                  type="button"
                  onClick={generatePalette}
                  disabled={isGenerating}
                  className="w-full bg-gradient-to-r from-purple-600 to-blue-600 text-white py-3 px-6 rounded-lg font-semibold hover:from-purple-700 hover:to-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all duration-200 flex items-center justify-center"
                >
                  {isGenerating ? (
                    <>
                      <ArrowPathIcon className="h-5 w-5 mr-2 animate-spin" />
                      Generating...
                    </>
                  ) : (
                    <>
                      <SwatchIcon className="h-5 w-5 mr-2" />
                      Generate Palettes
                    </>
                  )}
                </button>
              </form>
            </div>
          </motion.div>

          {/* Results Section */}
          <motion.div
            initial={{ opacity: 0, x: 20 }}
            animate={{ opacity: 1, x: 0 }}
            className="lg:col-span-2"
          >
            {generatedPalettes.length === 0 ? (
              <div className="bg-white rounded-2xl shadow-xl p-12 text-center">
                <SwatchIcon className="h-16 w-16 text-gray-400 mx-auto mb-4" />
                <h3 className="text-xl font-semibold text-gray-900 mb-2">
                  No Palettes Generated Yet
                </h3>
                <p className="text-gray-600 mb-6">
                  Fill out the form and click "Generate Palettes" to get AI-powered color suggestions.
                </p>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm text-gray-500">
                  <div className="p-4 border border-gray-200 rounded-lg">
                    <EyeDropperIcon className="h-8 w-8 mx-auto mb-2" />
                    <p>Smart Matching</p>
                  </div>
                  <div className="p-4 border border-gray-200 rounded-lg">
                    <CheckIcon className="h-8 w-8 mx-auto mb-2" />
                    <p>Accessibility</p>
                  </div>
                  <div className="p-4 border border-gray-200 rounded-lg">
                    <ArrowDownTrayIcon className="h-8 w-8 mx-auto mb-2" />
                    <p>Export Ready</p>
                  </div>
                </div>
              </div>
            ) : (
              <div className="space-y-6">
                <div className="flex items-center justify-between">
                  <h2 className="text-2xl font-bold text-gray-900">
                    Generated Palettes ({generatedPalettes.length})
                  </h2>
                  <button
                    onClick={generatePalette}
                    disabled={isGenerating}
                    className="text-purple-600 hover:text-purple-700 font-medium"
                  >
                    Generate More
                  </button>
                </div>

                <div className="grid grid-cols-1 gap-6">
                  {generatedPalettes.map((palette) => (
                    <motion.div
                      key={palette.id}
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      className="bg-white rounded-xl shadow-lg overflow-hidden hover:shadow-xl transition-shadow duration-200"
                    >
                      <div className="p-6">
                        <div className="flex items-start justify-between mb-4">
                          <div>
                            <h3 className="text-xl font-semibold text-gray-900 mb-1">
                              {palette.name}
                            </h3>
                            <p className="text-gray-600 text-sm">
                              {palette.description}
                            </p>
                          </div>
                          <div className="flex items-center space-x-2">
                            <div className="bg-green-100 text-green-800 px-2 py-1 rounded-full text-sm font-medium">
                              {palette.accessibility}
                            </div>
                            <button
                              onClick={() => likePalette(palette.id)}
                              className={`p-2 rounded-lg transition-colors ${
                                palette.liked 
                                  ? 'text-red-500 bg-red-50' 
                                  : 'text-gray-400 hover:text-red-500 hover:bg-red-50'
                              }`}
                            >
                              <HeartIcon className="h-5 w-5" />
                            </button>
                          </div>
                        </div>

                        {/* Color Swatches */}
                        <div className="mb-4">
                          <div className="flex items-center justify-between mb-3">
                            <p className="text-sm font-medium text-gray-700">Colors:</p>
                            <div className="flex items-center space-x-2">
                              <button className="text-purple-600 hover:text-purple-700 text-sm font-medium">
                                Copy All
                              </button>
                              <button className="text-purple-600 hover:text-purple-700 text-sm font-medium">
                                Export
                              </button>
                            </div>
                          </div>
                          <div className="flex items-center space-x-4">
                            {palette.colors.map((color, index) => (
                              <div key={index} className="text-center">
                                <ColorSwatch 
                                  color={color} 
                                  onClick={() => copyColor(color)}
                                />
                                <p className="text-xs text-gray-500 mt-1 font-mono">
                                  {color}
                                </p>
                              </div>
                            ))}
                          </div>
                        </div>

                        {/* Tags */}
                        <div className="flex flex-wrap gap-2 mb-4">
                          {palette.tags.map(tag => (
                            <span
                              key={tag}
                              className="bg-purple-100 text-purple-800 px-2 py-1 rounded-full text-xs font-medium"
                            >
                              {tag}
                            </span>
                          ))}
                        </div>

                        {/* Actions */}
                        <div className="flex items-center justify-between pt-4 border-t border-gray-100">
                          <div className="flex items-center space-x-2">
                            <button className="p-2 text-gray-400 hover:text-gray-600 rounded-lg transition-colors">
                              <ShareIcon className="h-5 w-5" />
                            </button>
                            <button className="p-2 text-gray-400 hover:text-gray-600 rounded-lg transition-colors">
                              <ArrowDownTrayIcon className="h-5 w-5" />
                            </button>
                          </div>
                          <button className="bg-purple-600 text-white px-4 py-2 rounded-lg text-sm font-medium hover:bg-purple-700 transition-colors">
                            Use Palette
                          </button>
                        </div>
                      </div>
                    </motion.div>
                  ))}
                </div>
              </div>
            )}
          </motion.div>
        </div>
      </div>
    </div>
  );
};

export default ColorPalette; 